package com.yn.reader.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yn.reader.model.common.Book;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BOOK".
*/
public class BookDao extends AbstractDao<Book, Long> {

    public static final String TABLENAME = "BOOK";

    /**
     * Properties of entity Book.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Bookid = new Property(0, long.class, "bookid", true, "_id");
        public final static Property Bookname = new Property(1, String.class, "bookname", false, "BOOKNAME");
        public final static Property Bookauthor = new Property(2, String.class, "bookauthor", false, "BOOKAUTHOR");
        public final static Property Bookimage = new Property(3, String.class, "bookimage", false, "BOOKIMAGE");
        public final static Property Bookdesc = new Property(4, String.class, "bookdesc", false, "BOOKDESC");
        public final static Property Bookprogress = new Property(5, String.class, "bookprogress", false, "BOOKPROGRESS");
        public final static Property Chapterprogress = new Property(6, String.class, "chapterprogress", false, "CHAPTERPROGRESS");
        public final static Property Isupdate = new Property(7, int.class, "isupdate", false, "ISUPDATE");
        public final static Property NoteUrl = new Property(8, String.class, "noteUrl", false, "NOTE_URL");
        public final static Property Chapterid = new Property(9, long.class, "chapterid", false, "CHAPTERID");
        public final static Property DurChapterPage = new Property(10, int.class, "durChapterPage", false, "DUR_CHAPTER_PAGE");
        public final static Property FinalDate = new Property(11, long.class, "finalDate", false, "FINAL_DATE");
        public final static Property Tag = new Property(12, String.class, "tag", false, "TAG");
        public final static Property Alreadyjoin = new Property(13, int.class, "alreadyjoin", false, "ALREADYJOIN");
        public final static Property IsHistory = new Property(14, boolean.class, "isHistory", false, "IS_HISTORY");
        public final static Property IsSynchronized = new Property(15, boolean.class, "isSynchronized", false, "IS_SYNCHRONIZED");
    };


    public BookDao(DaoConfig config) {
        super(config);
    }
    
    public BookDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BOOK\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: bookid
                "\"BOOKNAME\" TEXT," + // 1: bookname
                "\"BOOKAUTHOR\" TEXT," + // 2: bookauthor
                "\"BOOKIMAGE\" TEXT," + // 3: bookimage
                "\"BOOKDESC\" TEXT," + // 4: bookdesc
                "\"BOOKPROGRESS\" TEXT," + // 5: bookprogress
                "\"CHAPTERPROGRESS\" TEXT," + // 6: chapterprogress
                "\"ISUPDATE\" INTEGER NOT NULL ," + // 7: isupdate
                "\"NOTE_URL\" TEXT," + // 8: noteUrl
                "\"CHAPTERID\" INTEGER NOT NULL ," + // 9: chapterid
                "\"DUR_CHAPTER_PAGE\" INTEGER NOT NULL ," + // 10: durChapterPage
                "\"FINAL_DATE\" INTEGER NOT NULL ," + // 11: finalDate
                "\"TAG\" TEXT," + // 12: tag
                "\"ALREADYJOIN\" INTEGER NOT NULL ," + // 13: alreadyjoin
                "\"IS_HISTORY\" INTEGER NOT NULL ," + // 14: isHistory
                "\"IS_SYNCHRONIZED\" INTEGER NOT NULL );"); // 15: isSynchronized
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BOOK\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Book entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getBookid());
 
        String bookname = entity.getBookname();
        if (bookname != null) {
            stmt.bindString(2, bookname);
        }
 
        String bookauthor = entity.getBookauthor();
        if (bookauthor != null) {
            stmt.bindString(3, bookauthor);
        }
 
        String bookimage = entity.getBookimage();
        if (bookimage != null) {
            stmt.bindString(4, bookimage);
        }
 
        String bookdesc = entity.getBookdesc();
        if (bookdesc != null) {
            stmt.bindString(5, bookdesc);
        }
 
        String bookprogress = entity.getBookprogress();
        if (bookprogress != null) {
            stmt.bindString(6, bookprogress);
        }
 
        String chapterprogress = entity.getChapterprogress();
        if (chapterprogress != null) {
            stmt.bindString(7, chapterprogress);
        }
        stmt.bindLong(8, entity.getIsupdate());
 
        String noteUrl = entity.getNoteUrl();
        if (noteUrl != null) {
            stmt.bindString(9, noteUrl);
        }
        stmt.bindLong(10, entity.getChapterid());
        stmt.bindLong(11, entity.getDurChapterPage());
        stmt.bindLong(12, entity.getFinalDate());
 
        String tag = entity.getTag();
        if (tag != null) {
            stmt.bindString(13, tag);
        }
        stmt.bindLong(14, entity.getAlreadyjoin());
        stmt.bindLong(15, entity.getIsHistory() ? 1L: 0L);
        stmt.bindLong(16, entity.getIsSynchronized() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Book entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getBookid());
 
        String bookname = entity.getBookname();
        if (bookname != null) {
            stmt.bindString(2, bookname);
        }
 
        String bookauthor = entity.getBookauthor();
        if (bookauthor != null) {
            stmt.bindString(3, bookauthor);
        }
 
        String bookimage = entity.getBookimage();
        if (bookimage != null) {
            stmt.bindString(4, bookimage);
        }
 
        String bookdesc = entity.getBookdesc();
        if (bookdesc != null) {
            stmt.bindString(5, bookdesc);
        }
 
        String bookprogress = entity.getBookprogress();
        if (bookprogress != null) {
            stmt.bindString(6, bookprogress);
        }
 
        String chapterprogress = entity.getChapterprogress();
        if (chapterprogress != null) {
            stmt.bindString(7, chapterprogress);
        }
        stmt.bindLong(8, entity.getIsupdate());
 
        String noteUrl = entity.getNoteUrl();
        if (noteUrl != null) {
            stmt.bindString(9, noteUrl);
        }
        stmt.bindLong(10, entity.getChapterid());
        stmt.bindLong(11, entity.getDurChapterPage());
        stmt.bindLong(12, entity.getFinalDate());
 
        String tag = entity.getTag();
        if (tag != null) {
            stmt.bindString(13, tag);
        }
        stmt.bindLong(14, entity.getAlreadyjoin());
        stmt.bindLong(15, entity.getIsHistory() ? 1L: 0L);
        stmt.bindLong(16, entity.getIsSynchronized() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Book readEntity(Cursor cursor, int offset) {
        Book entity = new Book( //
            cursor.getLong(offset + 0), // bookid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // bookname
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // bookauthor
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // bookimage
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // bookdesc
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // bookprogress
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // chapterprogress
            cursor.getInt(offset + 7), // isupdate
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // noteUrl
            cursor.getLong(offset + 9), // chapterid
            cursor.getInt(offset + 10), // durChapterPage
            cursor.getLong(offset + 11), // finalDate
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // tag
            cursor.getInt(offset + 13), // alreadyjoin
            cursor.getShort(offset + 14) != 0, // isHistory
            cursor.getShort(offset + 15) != 0 // isSynchronized
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Book entity, int offset) {
        entity.setBookid(cursor.getLong(offset + 0));
        entity.setBookname(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBookauthor(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBookimage(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBookdesc(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBookprogress(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setChapterprogress(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIsupdate(cursor.getInt(offset + 7));
        entity.setNoteUrl(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setChapterid(cursor.getLong(offset + 9));
        entity.setDurChapterPage(cursor.getInt(offset + 10));
        entity.setFinalDate(cursor.getLong(offset + 11));
        entity.setTag(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setAlreadyjoin(cursor.getInt(offset + 13));
        entity.setIsHistory(cursor.getShort(offset + 14) != 0);
        entity.setIsSynchronized(cursor.getShort(offset + 15) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Book entity, long rowId) {
        entity.setBookid(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Book entity) {
        if(entity != null) {
            return entity.getBookid();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

package com.yn.reader.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yn.reader.model.dao.UserInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_INFO".
*/
public class UserInfoDao extends AbstractDao<UserInfo, Long> {

    public static final String TABLENAME = "USER_INFO";

    /**
     * Properties of entity UserInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Userid = new Property(0, long.class, "userid", true, "_id");
        public final static Property Nickname = new Property(1, String.class, "nickname", false, "NICKNAME");
        public final static Property Phone = new Property(2, String.class, "phone", false, "PHONE");
        public final static Property Email = new Property(3, String.class, "email", false, "EMAIL");
        public final static Property Avatar = new Property(4, String.class, "avatar", false, "AVATAR");
        public final static Property Sex = new Property(5, int.class, "sex", false, "SEX");
        public final static Property Desc = new Property(6, String.class, "desc", false, "DESC");
        public final static Property Key = new Property(7, String.class, "key", false, "KEY");
        public final static Property Coin = new Property(8, int.class, "coin", false, "COIN");
        public final static Property Readvipday = new Property(9, String.class, "readvipday", false, "READVIPDAY");
        public final static Property Chapterautobuy = new Property(10, int.class, "chapterautobuy", false, "CHAPTERAUTOBUY");
    };


    public UserInfoDao(DaoConfig config) {
        super(config);
    }
    
    public UserInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: userid
                "\"NICKNAME\" TEXT," + // 1: nickname
                "\"PHONE\" TEXT," + // 2: phone
                "\"EMAIL\" TEXT," + // 3: email
                "\"AVATAR\" TEXT," + // 4: avatar
                "\"SEX\" INTEGER NOT NULL ," + // 5: sex
                "\"DESC\" TEXT," + // 6: desc
                "\"KEY\" TEXT," + // 7: key
                "\"COIN\" INTEGER NOT NULL ," + // 8: coin
                "\"READVIPDAY\" TEXT," + // 9: readvipday
                "\"CHAPTERAUTOBUY\" INTEGER NOT NULL );"); // 10: chapterautobuy
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getUserid());
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(2, nickname);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(3, phone);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(4, email);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(5, avatar);
        }
        stmt.bindLong(6, entity.getSex());
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(7, desc);
        }
 
        String key = entity.getKey();
        if (key != null) {
            stmt.bindString(8, key);
        }
        stmt.bindLong(9, entity.getCoin());
 
        String readvipday = entity.getReadvipday();
        if (readvipday != null) {
            stmt.bindString(10, readvipday);
        }
        stmt.bindLong(11, entity.getChapterautobuy());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getUserid());
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(2, nickname);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(3, phone);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(4, email);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(5, avatar);
        }
        stmt.bindLong(6, entity.getSex());
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(7, desc);
        }
 
        String key = entity.getKey();
        if (key != null) {
            stmt.bindString(8, key);
        }
        stmt.bindLong(9, entity.getCoin());
 
        String readvipday = entity.getReadvipday();
        if (readvipday != null) {
            stmt.bindString(10, readvipday);
        }
        stmt.bindLong(11, entity.getChapterautobuy());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public UserInfo readEntity(Cursor cursor, int offset) {
        UserInfo entity = new UserInfo( //
            cursor.getLong(offset + 0), // userid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // nickname
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // phone
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // email
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // avatar
            cursor.getInt(offset + 5), // sex
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // desc
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // key
            cursor.getInt(offset + 8), // coin
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // readvipday
            cursor.getInt(offset + 10) // chapterautobuy
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserInfo entity, int offset) {
        entity.setUserid(cursor.getLong(offset + 0));
        entity.setNickname(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPhone(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setEmail(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAvatar(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSex(cursor.getInt(offset + 5));
        entity.setDesc(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setKey(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCoin(cursor.getInt(offset + 8));
        entity.setReadvipday(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setChapterautobuy(cursor.getInt(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserInfo entity, long rowId) {
        entity.setUserid(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserInfo entity) {
        if(entity != null) {
            return entity.getUserid();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

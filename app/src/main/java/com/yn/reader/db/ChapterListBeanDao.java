package com.yn.reader.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yn.reader.model.chapter.ChapterListBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHAPTER_LIST_BEAN".
*/
public class ChapterListBeanDao extends AbstractDao<ChapterListBean, Long> {

    public static final String TABLENAME = "CHAPTER_LIST_BEAN";

    /**
     * Properties of entity ChapterListBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property NoteUrl = new Property(0, String.class, "noteUrl", false, "NOTE_URL");
        public final static Property Chapterrank = new Property(1, int.class, "chapterrank", false, "CHAPTERRANK");
        public final static Property Chapterid = new Property(2, long.class, "chapterid", true, "_id");
        public final static Property Chaptername = new Property(3, String.class, "chaptername", false, "CHAPTERNAME");
        public final static Property Tag = new Property(4, String.class, "tag", false, "TAG");
        public final static Property HasCache = new Property(5, Boolean.class, "hasCache", false, "HAS_CACHE");
        public final static Property Chapterprice = new Property(6, float.class, "chapterprice", false, "CHAPTERPRICE");
        public final static Property Chapterwordcount = new Property(7, long.class, "chapterwordcount", false, "CHAPTERWORDCOUNT");
        public final static Property Chaptershoptype = new Property(8, int.class, "chaptershoptype", false, "CHAPTERSHOPTYPE");
        public final static Property Progress = new Property(9, float.class, "progress", false, "PROGRESS");
        public final static Property BookId = new Property(10, long.class, "bookId", false, "BOOK_ID");
    };


    public ChapterListBeanDao(DaoConfig config) {
        super(config);
    }
    
    public ChapterListBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHAPTER_LIST_BEAN\" (" + //
                "\"NOTE_URL\" TEXT," + // 0: noteUrl
                "\"CHAPTERRANK\" INTEGER NOT NULL ," + // 1: chapterrank
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 2: chapterid
                "\"CHAPTERNAME\" TEXT," + // 3: chaptername
                "\"TAG\" TEXT," + // 4: tag
                "\"HAS_CACHE\" INTEGER," + // 5: hasCache
                "\"CHAPTERPRICE\" REAL NOT NULL ," + // 6: chapterprice
                "\"CHAPTERWORDCOUNT\" INTEGER NOT NULL ," + // 7: chapterwordcount
                "\"CHAPTERSHOPTYPE\" INTEGER NOT NULL ," + // 8: chaptershoptype
                "\"PROGRESS\" REAL NOT NULL ," + // 9: progress
                "\"BOOK_ID\" INTEGER NOT NULL );"); // 10: bookId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHAPTER_LIST_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ChapterListBean entity) {
        stmt.clearBindings();
 
        String noteUrl = entity.getNoteUrl();
        if (noteUrl != null) {
            stmt.bindString(1, noteUrl);
        }
        stmt.bindLong(2, entity.getChapterrank());
        stmt.bindLong(3, entity.getChapterid());
 
        String chaptername = entity.getChaptername();
        if (chaptername != null) {
            stmt.bindString(4, chaptername);
        }
 
        String tag = entity.getTag();
        if (tag != null) {
            stmt.bindString(5, tag);
        }
 
        Boolean hasCache = entity.getHasCache();
        if (hasCache != null) {
            stmt.bindLong(6, hasCache ? 1L: 0L);
        }
        stmt.bindDouble(7, entity.getChapterprice());
        stmt.bindLong(8, entity.getChapterwordcount());
        stmt.bindLong(9, entity.getChaptershoptype());
        stmt.bindDouble(10, entity.getProgress());
        stmt.bindLong(11, entity.getBookId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ChapterListBean entity) {
        stmt.clearBindings();
 
        String noteUrl = entity.getNoteUrl();
        if (noteUrl != null) {
            stmt.bindString(1, noteUrl);
        }
        stmt.bindLong(2, entity.getChapterrank());
        stmt.bindLong(3, entity.getChapterid());
 
        String chaptername = entity.getChaptername();
        if (chaptername != null) {
            stmt.bindString(4, chaptername);
        }
 
        String tag = entity.getTag();
        if (tag != null) {
            stmt.bindString(5, tag);
        }
 
        Boolean hasCache = entity.getHasCache();
        if (hasCache != null) {
            stmt.bindLong(6, hasCache ? 1L: 0L);
        }
        stmt.bindDouble(7, entity.getChapterprice());
        stmt.bindLong(8, entity.getChapterwordcount());
        stmt.bindLong(9, entity.getChaptershoptype());
        stmt.bindDouble(10, entity.getProgress());
        stmt.bindLong(11, entity.getBookId());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 2);
    }    

    @Override
    public ChapterListBean readEntity(Cursor cursor, int offset) {
        ChapterListBean entity = new ChapterListBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // noteUrl
            cursor.getInt(offset + 1), // chapterrank
            cursor.getLong(offset + 2), // chapterid
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // chaptername
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // tag
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0, // hasCache
            cursor.getFloat(offset + 6), // chapterprice
            cursor.getLong(offset + 7), // chapterwordcount
            cursor.getInt(offset + 8), // chaptershoptype
            cursor.getFloat(offset + 9), // progress
            cursor.getLong(offset + 10) // bookId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ChapterListBean entity, int offset) {
        entity.setNoteUrl(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setChapterrank(cursor.getInt(offset + 1));
        entity.setChapterid(cursor.getLong(offset + 2));
        entity.setChaptername(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTag(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setHasCache(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
        entity.setChapterprice(cursor.getFloat(offset + 6));
        entity.setChapterwordcount(cursor.getLong(offset + 7));
        entity.setChaptershoptype(cursor.getInt(offset + 8));
        entity.setProgress(cursor.getFloat(offset + 9));
        entity.setBookId(cursor.getLong(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ChapterListBean entity, long rowId) {
        entity.setChapterid(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ChapterListBean entity) {
        if(entity != null) {
            return entity.getChapterid();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

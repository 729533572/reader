package com.yn.reader.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yn.reader.model.dao.BookInfoBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BOOK_INFO_BEAN".
*/
public class BookInfoBeanDao extends AbstractDao<BookInfoBean, Void> {

    public static final String TABLENAME = "BOOK_INFO_BEAN";

    /**
     * Properties of entity BookInfoBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ChapterUrl = new Property(0, String.class, "chapterUrl", false, "CHAPTER_URL");
        public final static Property FinalRefreshData = new Property(1, long.class, "finalRefreshData", false, "FINAL_REFRESH_DATA");
    };


    public BookInfoBeanDao(DaoConfig config) {
        super(config);
    }
    
    public BookInfoBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BOOK_INFO_BEAN\" (" + //
                "\"CHAPTER_URL\" TEXT," + // 0: chapterUrl
                "\"FINAL_REFRESH_DATA\" INTEGER NOT NULL );"); // 1: finalRefreshData
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BOOK_INFO_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BookInfoBean entity) {
        stmt.clearBindings();
 
        String chapterUrl = entity.getChapterUrl();
        if (chapterUrl != null) {
            stmt.bindString(1, chapterUrl);
        }
        stmt.bindLong(2, entity.getFinalRefreshData());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BookInfoBean entity) {
        stmt.clearBindings();
 
        String chapterUrl = entity.getChapterUrl();
        if (chapterUrl != null) {
            stmt.bindString(1, chapterUrl);
        }
        stmt.bindLong(2, entity.getFinalRefreshData());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public BookInfoBean readEntity(Cursor cursor, int offset) {
        BookInfoBean entity = new BookInfoBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // chapterUrl
            cursor.getLong(offset + 1) // finalRefreshData
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BookInfoBean entity, int offset) {
        entity.setChapterUrl(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setFinalRefreshData(cursor.getLong(offset + 1));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(BookInfoBean entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(BookInfoBean entity) {
        return null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
